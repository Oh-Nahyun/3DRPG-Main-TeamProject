//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Test/TestInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestInputAction"",
    ""maps"": [
        {
            ""name"": ""TestInput"",
            ""id"": ""e12f63c3-e547-4449-a20b-27efb2d2a743"",
            ""actions"": [
                {
                    ""name"": ""Key1"",
                    ""type"": ""Button"",
                    ""id"": ""1ebbc5c4-234d-4ddd-9e3f-f9632680aa58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key2"",
                    ""type"": ""Button"",
                    ""id"": ""e5ec8688-2162-45f6-9f82-4f45873de490"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key3"",
                    ""type"": ""Button"",
                    ""id"": ""fa675db7-747f-4fab-80e8-400da06449ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key4"",
                    ""type"": ""Button"",
                    ""id"": ""1199a646-189d-4330-8f28-adc39e2ccc26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key5"",
                    ""type"": ""Button"",
                    ""id"": ""d41d0341-2bf8-465d-878b-44f82b203517"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5265238c-656c-4622-a47d-a59ef880d3d9"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardMouse"",
                    ""action"": ""Key1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""228b2412-d9ee-42b4-a7f3-54b327930ccc"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardMouse"",
                    ""action"": ""Key2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcea51b2-e962-4730-9865-f195d935b5a9"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardMouse"",
                    ""action"": ""Key3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5076ccc0-bb5d-44a8-9a9c-33596d77b47a"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardMouse"",
                    ""action"": ""Key4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1b03342-29be-48a7-b706-0678ee55888b"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardMouse"",
                    ""action"": ""Key5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoardMouse"",
            ""bindingGroup"": ""KeyBoardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // TestInput
        m_TestInput = asset.FindActionMap("TestInput", throwIfNotFound: true);
        m_TestInput_Key1 = m_TestInput.FindAction("Key1", throwIfNotFound: true);
        m_TestInput_Key2 = m_TestInput.FindAction("Key2", throwIfNotFound: true);
        m_TestInput_Key3 = m_TestInput.FindAction("Key3", throwIfNotFound: true);
        m_TestInput_Key4 = m_TestInput.FindAction("Key4", throwIfNotFound: true);
        m_TestInput_Key5 = m_TestInput.FindAction("Key5", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TestInput
    private readonly InputActionMap m_TestInput;
    private List<ITestInputActions> m_TestInputActionsCallbackInterfaces = new List<ITestInputActions>();
    private readonly InputAction m_TestInput_Key1;
    private readonly InputAction m_TestInput_Key2;
    private readonly InputAction m_TestInput_Key3;
    private readonly InputAction m_TestInput_Key4;
    private readonly InputAction m_TestInput_Key5;
    public struct TestInputActions
    {
        private @TestInputAction m_Wrapper;
        public TestInputActions(@TestInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Key1 => m_Wrapper.m_TestInput_Key1;
        public InputAction @Key2 => m_Wrapper.m_TestInput_Key2;
        public InputAction @Key3 => m_Wrapper.m_TestInput_Key3;
        public InputAction @Key4 => m_Wrapper.m_TestInput_Key4;
        public InputAction @Key5 => m_Wrapper.m_TestInput_Key5;
        public InputActionMap Get() { return m_Wrapper.m_TestInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestInputActions set) { return set.Get(); }
        public void AddCallbacks(ITestInputActions instance)
        {
            if (instance == null || m_Wrapper.m_TestInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestInputActionsCallbackInterfaces.Add(instance);
            @Key1.started += instance.OnKey1;
            @Key1.performed += instance.OnKey1;
            @Key1.canceled += instance.OnKey1;
            @Key2.started += instance.OnKey2;
            @Key2.performed += instance.OnKey2;
            @Key2.canceled += instance.OnKey2;
            @Key3.started += instance.OnKey3;
            @Key3.performed += instance.OnKey3;
            @Key3.canceled += instance.OnKey3;
            @Key4.started += instance.OnKey4;
            @Key4.performed += instance.OnKey4;
            @Key4.canceled += instance.OnKey4;
            @Key5.started += instance.OnKey5;
            @Key5.performed += instance.OnKey5;
            @Key5.canceled += instance.OnKey5;
        }

        private void UnregisterCallbacks(ITestInputActions instance)
        {
            @Key1.started -= instance.OnKey1;
            @Key1.performed -= instance.OnKey1;
            @Key1.canceled -= instance.OnKey1;
            @Key2.started -= instance.OnKey2;
            @Key2.performed -= instance.OnKey2;
            @Key2.canceled -= instance.OnKey2;
            @Key3.started -= instance.OnKey3;
            @Key3.performed -= instance.OnKey3;
            @Key3.canceled -= instance.OnKey3;
            @Key4.started -= instance.OnKey4;
            @Key4.performed -= instance.OnKey4;
            @Key4.canceled -= instance.OnKey4;
            @Key5.started -= instance.OnKey5;
            @Key5.performed -= instance.OnKey5;
            @Key5.canceled -= instance.OnKey5;
        }

        public void RemoveCallbacks(ITestInputActions instance)
        {
            if (m_Wrapper.m_TestInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestInputActions instance)
        {
            foreach (var item in m_Wrapper.m_TestInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestInputActions @TestInput => new TestInputActions(this);
    private int m_KeyBoardMouseSchemeIndex = -1;
    public InputControlScheme KeyBoardMouseScheme
    {
        get
        {
            if (m_KeyBoardMouseSchemeIndex == -1) m_KeyBoardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyBoardMouse");
            return asset.controlSchemes[m_KeyBoardMouseSchemeIndex];
        }
    }
    public interface ITestInputActions
    {
        void OnKey1(InputAction.CallbackContext context);
        void OnKey2(InputAction.CallbackContext context);
        void OnKey3(InputAction.CallbackContext context);
        void OnKey4(InputAction.CallbackContext context);
        void OnKey5(InputAction.CallbackContext context);
    }
}
